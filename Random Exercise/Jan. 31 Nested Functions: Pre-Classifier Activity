""" A simple nested function. Prints sum of length of array and length of first index, multiplied by 2. """

def fun(item)
  def do(item):
    x = len(item)
    return x
  def other(item):
    x = len(item[0])
    return x
  def final(item):
    return do(item) + other(item)
  return final(item) * 2
example = fun(['hello', 'yes', 'me'])
print(example)
>>> 16

""" 
-------------------------------------------------------------------
Similar. This time, the first nested function does not 
take the (relatively) global argument as its argument, 
and it is called in the second which does take the global argument. 
-------------------------------------------------------------------
"""

def fun1(item):
	def action(string):
		return len(string) * 2
	def compute(item):
		x = item[-1]
		return action(x)
	return compute(item)

r = fun1(['pd', 'np', 'sns', 'plt', 'talib'])
print(r)
>>> 10

""" Quick exercise to refamiliarize with passing variables between class functions """ 

class Thing(object):
	def __init__(self, ar):
		self.ar = ar
	def f(self):
		self.leng = len(self.ar)
		return self.leng
	def p(self):
		self.leng = self.f()
		self.stri = str(self.leng)
		return self.stri
    
y = Thing3([1,2,3,4,5])
print(y.p())
>>> 5

"""
Here is the big one. Nested functions within a class.
"""

class Thing9(object):
	def __init__(self, item):
		self.item = item
	def do(self):
		def do1():
			return len(self.item)
		def do2():
			return self.item + self.item
		return do1(), do2()
	def func(self):
		return self.do()

	
instance = Thing9('hello')
print(instance.do())
>>> (5, 'hellohello')
print(instance.fun())
>>> (5, 'hellohello')
